{
  "properties": {
    "connectionReferences": {
      "shared_sql-2": {
        "runtimeSource": "invoker",
        "connection": {
          "connectionReferenceLogicalName": "envvar_SourceDatabaseConnection"
        },
        "api": {
          "name": "shared_sql"
        }
      },
      "shared_commondataserviceforapps": {
        "impersonation": {},
        "runtimeSource": "invoker",
        "connection": {
          "connectionReferenceLogicalName": "envvar_DataverseConnection"
        },
        "api": {
          "name": "shared_commondataserviceforapps"
        }
      },
      "shared_sql-3": {
        "runtimeSource": "invoker",
        "connection": {
          "connectionReferenceLogicalName": "envvar_TargetDatabaseConnection"
        },
        "api": {
          "name": "shared_sql"
        }
      }
    },
    "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "contentVersion": "1.0.0.0",
      "parameters": {
        "$authentication": {
          "defaultValue": {},
          "type": "SecureObject"
        },
        "$connections": {
          "defaultValue": {},
          "type": "Object"
        }
      },
      "triggers": {
        "manual": {
          "metadata": {
            "operationMetadataId": "310a7995-978c-4bf6-9fb7-0bda7e7cbacb"
          },
          "type": "Request",
          "kind": "Button",
          "inputs": {
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "description": "Enter name of Source View (e.g. df.wsvEmpBar)",
                  "title": "SourceView",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_1": {
                  "description": "Enter the name of the Source View backup (e.g. df.bk_wsvEmpBar_WSDWH_R)",
                  "title": "SourceView_bu",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_2": {
                  "description": "The name of the target table (e.g. wstEmployeeBarAdmission)",
                  "title": "TargetTable",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_3": {
                  "description": "Optional - This field is only populated when called from the Parent Flow",
                  "title": "ParentFlowRunId",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                }
              },
              "required": [
                "text",
                "text_1",
                "text_2"
              ]
            }
          }
        }
      },
      "actions": {
        "üìã_Flow_Documentation_Header": {
          "runAfter": {},
          "metadata": {
            "operationMetadataId": "flow-documentation-header"
          },
          "type": "Compose",
          "inputs": "üìã HR DELTA FLOWS FOR WSDWH_R - FRAMEWORK WITH BATCHING\n\nüéØ PURPOSE:\nProcesses changed data from source system table/view to target a target table on a different server. \n\nüì• INPUTS:\n‚Ä¢ SourceView: Name of source view containing delta data (e.g., df.wsvEmpBar)\n‚Ä¢ SourceView_bu: Name of source backup view (e.g., df.bk_wsvEmpBar_WSDWH_R)\n‚Ä¢ TargetTable: Name of target table for data insertion (e.g., wstEmployeeBarAdmission)\n‚Ä¢ ParentFlowRunId: Optional - Flow run ID when called from parent flow\n\nüì§ OUTPUTS:\n‚Ä¢ JSON response containing processing results\n‚Ä¢ Dataverse execution logs for monitoring\n‚Ä¢ Source table backup for rollback capabilities\n\nüîÑ PROCESS OVERVIEW:\n1. Initialize variables and retrieve dynamic configuration\n2. Get delta changes from source system\n3. Process changes in configurable batches (500 records)\n4. Apply changes to target system using stored procedures\n5. Log execution details and create backup\n\n‚öôÔ∏è CONFIGURATION:\n‚Ä¢ Batch Size: 500 records per batch (configurable)\n‚Ä¢ Max Iterations: 60 batches (30,000 records max)\n‚Ä¢ Timeout: 1 hour per execution\n‚Ä¢ Connections: Source DB (WSSA), Target DB (WSDWH_R_T), Dataverse\n\nüõ°Ô∏è ERROR HANDLING:\n‚Ä¢ Try-Catch blocks around SQL operations\n‚Ä¢ Graceful failure with detailed logging\n‚Ä¢ Continuation on individual batch failures"
        },
        "Initialize_FlowConfig": {
          "runAfter": {
            "üìã_Flow_Documentation_Header": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-flowconfig",
            "description": "üìã Initializes FlowConfig object variable to store parsed configuration data from the database. Will contain flow metadata, table mappings, and processing rules retrieved from wspGetFlowConfig stored procedure."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "FlowConfig",
                "type": "object"
              }
            ]
          }
        },
        "Initialize_JsonOutput": {
          "runAfter": {
            "Initialize_FlowConfig": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-varjsonoutput",
            "description": "üìÑ Initializes JsonOutput string variable to store configuration data retrieved from database. Acts as temporary storage before parsing into FlowConfig object for workflow processing."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "JsonOutput",
                "type": "string"
              }
            ]
          }
        },
        "Initialize_Changes": {
          "runAfter": {
            "Initialize_JsonOutput": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-var-changes",
            "description": "üìä Initializes Changes array variable to store delta records retrieved from source system. Will contain all records to be processed, then divided into batches for efficient processing."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "Changes",
                "type": "array"
              }
            ]
          }
        },
        "Initialize_BatchSize": {
          "runAfter": {
            "Initialize_Changes": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-batchsize",
            "description": "‚öôÔ∏è Initializes BatchSize integer variable to control number of records processed per batch. Set to 500 for optimal performance balance between throughput and memory usage."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "BatchSize",
                "type": "integer",
                "value": 500
              }
            ]
          }
        },
        "Initialize_BatchIndex": {
          "runAfter": {
            "Initialize_BatchSize": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-batchindex",
            "description": "üî¢ Initializes BatchIndex integer variable to track current batch position during processing. Starts at 0 and increments with each batch iteration for progress tracking."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "BatchIndex",
                "type": "integer",
                "value": 0
              }
            ]
          }
        },
        "Initialize_BatchTotalCount": {
          "runAfter": {
            "Initialize_BatchIndex": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-batchtotalcount",
            "description": "üìà Initializes BatchTotalCount integer variable to store total number of batches required for processing. Calculated as ceiling(total records / batch size) for progress monitoring."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "BatchTotalCount",
                "type": "integer",
                "value": 0
              }
            ]
          }
        },
        "Initialize_BatchIndexTemp": {
          "runAfter": {
            "Initialize_BatchTotalCount": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "init-batchindextemp",
            "description": "üîÑ Initializes BatchIndexTemp integer variable as temporary counter for batch processing calculations. Used within loops to calculate current batch position and slice arrays."
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "BatchIndexTemp",
                "type": "integer",
                "value": 0
              }
            ]
          }
        },
        "üìù_Configuration_Section": {
          "runAfter": {
            "Initialize_BatchIndexTemp": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "config-section-docs"
          },
          "type": "Compose",
          "inputs": "üìù CONFIGURATION RETRIEVAL SECTION\n\nüéØ PURPOSE: Retrieve dynamic configuration from database and set up flow variables\n\nüîß ACTIONS:\n‚Ä¢ Calls wspGetFlowConfig stored procedure\n‚Ä¢ Parses JSON configuration containing table mappings\n‚Ä¢ Sets FlowConfig variable with first configuration record\n\nüìä CONFIGURATION STRUCTURE:\n‚Ä¢ FlowName: Identifies the specific flow configuration\n‚Ä¢ RetrievedAt: Timestamp of configuration retrieval\n‚Ä¢ KeyMappings: Array of column mappings between source and target\n  - SourceDB/TargetDB: Database identifiers\n  - SourceTableName/TargetTableName: Table identifiers\n  - Column mappings with data types and flags\n\n‚ö†Ô∏è DEPENDENCIES:\n‚Ä¢ All variables must be initialized before configuration retrieval\n‚Ä¢ Database connection 'shared_sql-2' must be available"
        },
        "Parse_JSON_-_Config_for_Flow_Run": {
          "runAfter": {
            "ESP_-_Get_Config_for_Flow_Run": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "refactored-parse-config-json",
            "description": "üìã Parses the JSON configuration returned from wspGetFlowConfig stored procedure. Validates the structure against a predefined schema containing FlowName, RetrievedAt timestamp, and KeyMappings array. Ensures all required fields are present for downstream processing."
          },
          "type": "ParseJson",
          "inputs": {
            "content": "@json(body('ESP_-_Get_Config_for_Flow_Run')?['ResultSets']?['Table1']?[0]?['FlowConfig'])",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "FlowName": {
                    "type": "string"
                  },
                  "RetrievedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "KeyMappings": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "MappingID": {
                          "type": "integer"
                        },
                        "SourceDB": {
                          "type": "string"
                        },
                        "SourceTableName": {
                          "type": "string"
                        },
                        "SourceTableBUName": {
                          "type": "string"
                        },
                        "SourceColumnName": {
                          "type": "string"
                        },
                        "TargetDB": {
                          "type": "string"
                        },
                        "TargetTableName": {
                          "type": "string"
                        },
                        "TargetColumnName": {
                          "type": "string"
                        },
                        "DataType": {
                          "type": "string"
                        },
                        "IsKeyColumn": {
                          "type": "boolean"
                        },
                        "ExcludeCompare": {
                          "type": "boolean"
                        },
                        "IsActive": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "MappingID",
                        "SourceTableName",
                        "SourceTableBUName",
                        "SourceColumnName",
                        "TargetTableName",
                        "TargetColumnName",
                        "DataType",
                        "IsKeyColumn",
                        "ExcludeCompare",
                        "IsActive"
                      ]
                    }
                  }
                },
                "required": [
                  "FlowName",
                  "RetrievedAt",
                  "KeyMappings"
                ]
              }
            }
          }
        },
        "ESP_-_Get_Config_for_Flow_Run": {
          "runAfter": {
            "üìù_Configuration_Section": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "refactored-esp-get-config-for-flow",
            "description": "üîß Retrieves dynamic flow configuration from WSSA database. Calls wspGetFlowConfig stored procedure with source view, backup view, and target table parameters. Returns JSON configuration containing table mappings, data types, and processing rules for the current flow execution."
          },
          "type": "OpenApiConnection",
          "inputs": {
            "parameters": {
              "server": "WSWMDWH01",
              "database": "WSSA",
              "procedure": "df.wspGetFlowConfig",
              "parameters/SourceView": "@triggerBody()?['text']",
              "parameters/SourceView_bu": "@triggerBody()?['text_1']",
              "parameters/TargetTable": "@triggerBody()?['text_2']"
            },
            "host": {
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_sql",
              "operationId": "ExecuteProcedure_V2",
              "connectionName": "shared_sql-2"
            }
          }
        },
        "Set_Flow_Config": {
          "runAfter": {
            "Parse_JSON_-_Config_for_Flow_Run": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "refactored-set-flow-config"
          },
          "type": "SetVariable",
          "inputs": {
            "name": "FlowConfig",
            "value": "@first(body('Parse_JSON_-_Config_for_Flow_Run'))"
          }
        },
        "ESP_-_Get_Changes_from_Source": {
          "runAfter": {
            "Set_Flow_Config": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "esp-get-changes-from-source",
            "description": "üìä Retrieves delta changes from the source system by calling wspGetChanges stored procedure. Returns JSON array containing all records that have been inserted, updated, or deleted since the last synchronization. This data forms the basis for batch processing."
          },
          "type": "OpenApiConnection",
          "inputs": {
            "parameters": {
              "server": "WSWMDWH01",
              "database": "WSSA",
              "procedure": "[df].[wspCheckOrGetChanges]",
              "parameters/SourceView": "@triggerBody()?['text']",
              "parameters/SourceView_bu": "@triggerBody()?['text_1']",
              "parameters/ReturnRows": true
            },
            "host": {
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_sql",
              "operationId": "ExecuteProcedure_V2",
              "connectionName": "shared_sql-2"
            }
          }
        },
        "Set_JsonOutput_String": {
          "runAfter": {
            "ESP_-_Get_Changes_from_Source": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "17c62233-7da7-4c60-bf97-ad33a15bd7cd"
          },
          "type": "SetVariable",
          "inputs": {
            "name": "JsonOutput",
            "value": "@{outputs('ESP_-_Get_Changes_from_Source')?['body']}"
          }
        },
        "Parse_JSON_-_Get_Changes_from_Source": {
          "runAfter": {
            "Set_JsonOutput_String": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "48722990-9645-4112-8b1a-de9c622d5bdd"
          },
          "type": "ParseJson",
          "inputs": {
            "content": "@json(outputs('ESP_-_Get_Changes_from_Source')?['body/resultsets']?['Table1']?[0]?['JsonOutput'])",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ChangeType": {
                    "type": "string"
                  }
                },
                "required": [
                  "ChangeType"
                ]
              }
            }
          }
        },
        "Set_Changes_Array": {
          "runAfter": {
            "Parse_JSON_-_Get_Changes_from_Source": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "set-batch-variables"
          },
          "type": "SetVariable",
          "inputs": {
            "name": "Changes",
            "value": "@body('Parse_JSON_-_Get_Changes_from_Source')"
          }
        },
        "Set_BatchTotalCount": {
          "runAfter": {
            "Set_Changes_Array": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "set-batch-total-count"
          },
          "type": "SetVariable",
          "inputs": {
            "name": "BatchTotalCount",
            "value": "@length(variables('Changes'))"
          }
        },
        "üìä_Data_Processing_Section": {
          "runAfter": {
            "Set_BatchTotalCount": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "data-processing-section-docs"
          },
          "type": "Compose",
          "inputs": "üìä DATA PROCESSING SECTION\n\nüéØ PURPOSE: Retrieve and prepare delta changes for batch processing\n\nüîÑ PROCESS FLOW:\n1. Get Changes: Calls wspGetChanges stored procedure on source system\n2. Parse JSON: Converts raw JSON output to structured data\n3. Set Variables: Populates Changes array and calculates batch total\n\nüìã DATA STRUCTURE:\n‚Ä¢ Changes Array: Contains delta records with ChangeType field\n‚Ä¢ Each record represents an insert, update, or delete operation\n‚Ä¢ JSON structure validated against predefined schema\n\nüìà BATCH PREPARATION:\n‚Ä¢ BatchTotalCount: Total number of records to process\n‚Ä¢ BatchSize: Fixed at 500 records per batch\n‚Ä¢ BatchIndex: Starting position (initialized to 0)\n\n‚öôÔ∏è PERFORMANCE CONSIDERATIONS:\n‚Ä¢ Large datasets processed in manageable chunks\n‚Ä¢ Memory optimization through batching\n‚Ä¢ Progress tracking via batch indices"
        },
        "Respond_to_Parent_Flow": {
          "runAfter": {
            "ESP_-_Create_New_Backup_Snapshot_of_Source_View": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "60c59d2d-3ea8-458b-9673-fd9573018566"
          },
          "type": "Response",
          "kind": "PowerApp",
          "inputs": {
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "title": "Response",
                  "x-ms-dynamically-added": true,
                  "type": "string"
                }
              },
              "additionalProperties": {}
            },
            "statusCode": 200,
            "body": {
              "response": "@{variables('JsonOutput')}"
            }
          }
        },
        "üìù_Logging_and_Cleanup_Section": {
          "runAfter": {
            "Do_until": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "logging-cleanup-section-docs"
          },
          "type": "Compose",
          "inputs": "üìù LOGGING AND CLEANUP SECTION\n\nüéØ PURPOSE: Record execution details and perform data backup operations\n\nüìã LOGGING ACTIVITIES:\n‚Ä¢ Dataverse Record: Creates execution log in trz_flowexecutionlogs\n‚Ä¢ Flow Metadata: Records flow name, run ID, and timestamps\n‚Ä¢ Table References: Documents source and target table names\n‚Ä¢ Parent Flow Tracking: Links to parent flow if applicable\n\nüõ°Ô∏è BACKUP OPERATIONS:\n‚Ä¢ Source Table Backup: Calls wspBackupTable stored procedure\n‚Ä¢ Rollback Capability: Enables data recovery if needed\n‚Ä¢ Audit Trail: Maintains historical snapshots\n‚Ä¢ Suffix Convention: Uses TargetDB_TEST naming pattern\n\nüì§ RESPONSE GENERATION:\n‚Ä¢ JSON Output: Returns processing results to caller\n‚Ä¢ Status Information: Success/failure indicators\n‚Ä¢ Record Counts: Number of records processed\n‚Ä¢ Execution Summary: Key metrics and outcomes\n\nüîó INTEGRATION POINTS:\n‚Ä¢ Dataverse: For execution logging and monitoring\n‚Ä¢ Source Database: For backup operations\n‚Ä¢ Parent Flows: For orchestrated processing scenarios"
        },
        "Log_Row_to_Dataverse_Table": {
          "runAfter": {
            "üìù_Logging_and_Cleanup_Section": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "f8fe6b34-bd54-4af8-a4b8-b578371a2074",
            "description": "üìù Creates an execution log record in Dataverse (trz_flowexecutionlogs table) for monitoring and audit purposes. Records flow run ID, flow name, source/target table names, and execution metadata for tracking and troubleshooting."
          },
          "type": "OpenApiConnection",
          "inputs": {
            "parameters": {
              "entityName": "trz_flowexecutionlogs",
              "item/trz_flowrunid": "@workflow()?['Run']?['Name']",
              "item/trz_flowname": "@workflow().tags.flowdisplayname",
              "item/trz_flowrunname": "@variables('FlowConfig')?['FlowName']",
              "item/trz_sourcetablename": "@first(variables('FlowConfig')?['KeyMappings'])?['SourceTableName']",
              "item/trz_targettablename": "@first(variables('FlowConfig')?['KeyMappings'])?['TargetTableName']"
            },
            "host": {
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps",
              "operationId": "CreateRecord",
              "connectionName": "shared_commondataserviceforapps"
            }
          }
        },
        "üîÑ_Batch_Processing_Section": {
          "runAfter": {
            "üìä_Data_Processing_Section": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "batch-processing-section-docs"
          },
          "type": "Compose",
          "inputs": "üîÑ BATCH PROCESSING SECTION\n\nüéØ PURPOSE: Process changes in optimized batches to handle large datasets efficiently\n\n‚öôÔ∏è BATCH LOGIC:\n‚Ä¢ Loop Condition: Continue while BatchIndex < BatchTotalCount\n‚Ä¢ Batch Size: 500 records per iteration\n‚Ä¢ Max Iterations: 60 (prevents infinite loops)\n‚Ä¢ Timeout: 1 hour total execution time\n\nüîß BATCH OPERATIONS:\n1. Compose Batch: Extract next 500 records using skip/take\n2. Convert to String: Prepare JSON for stored procedure\n3. SQL Execution: Send batch to wspApplyChanges procedure\n4. Error Handling: Try-Catch around SQL operations\n5. Index Update: Increment BatchIndex for next iteration\n\nüìä PERFORMANCE BENEFITS:\n‚Ä¢ Reduces memory usage for large datasets\n‚Ä¢ Enables progress tracking and recovery\n‚Ä¢ Prevents timeout on massive data loads\n‚Ä¢ Allows partial success scenarios\n\nüõ°Ô∏è ERROR RESILIENCE:\n‚Ä¢ Individual batch failures don't stop entire process\n‚Ä¢ Detailed logging for troubleshooting\n‚Ä¢ Graceful degradation under load"
        },
        "Do_until": {
          "actions": {
            "Compose_Batch": {
              "metadata": {
                "operationMetadataId": "adbc2547-0431-4790-ae2e-f13f13bf8bb8",
                "description": "üì¶ Creates current batch by slicing Changes array. Uses skip() to jump to current BatchIndex position and take() to grab BatchSize records (500). This optimizes processing by handling data in manageable chunks."
              },
              "type": "Compose",
              "inputs": "@take(skip(variables('Changes'),variables('BatchIndex')),variables('BatchSize'))"
            },
            "Try_-_Insert_Data_to_Target": {
              "actions": {
                "ESP_-_Send_JSON_to_SQL83": {
                  "type": "OpenApiConnection",
                  "inputs": {
                    "parameters": {
                      "server": "WSWMSQL83",
                      "database": "WSDWH_R_T",
                      "procedure": "[df].[wspApplyChanges]",
                      "parameters/SourceTable": "@first(variables('FlowConfig')?['KeyMappings'])?['SourceTableName']",
                      "parameters/TargetTable": "@first(variables('FlowConfig')?['KeyMappings'])?['TargetTableName']",
                      "parameters/Changes": "@outputs('Convert_Batch_JSON_to_string')"
                    },
                    "host": {
                      "apiId": "/providers/Microsoft.PowerApps/apis/shared_sql",
                      "operationId": "ExecuteProcedure_V2",
                      "connectionName": "shared_sql-3"
                    }
                  }
                }
              },
              "runAfter": {
                "Convert_Batch_JSON_to_string": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "a35dd9ff-bc38-4d56-8f7b-7ddeaecaa8d6",
                "description": "üõ°Ô∏è Try block for SQL batch processing operation. Executes wspApplyChanges stored procedure to apply current batch of changes to target database. Handles potential SQL connection or execution errors gracefully."
              },
              "type": "Scope"
            },
            "Catch_-_Error_Processing": {
              "actions": {},
              "runAfter": {
                "Try_-_Insert_Data_to_Target": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "b3964ab8-8118-4d38-816e-586632e09efc",
                "description": "‚ö†Ô∏è Catch block for SQL batch processing errors. Currently configured to continue processing on errors without specific error handling actions. Could be enhanced with logging or notification actions for production use."
              },
              "type": "Scope"
            },
            "Set_BatchIndexTemp": {
              "runAfter": {
                "Catch_-_Error_Processing": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "3579411a-a83a-4a2e-a10c-e01bb4b475dd",
                "description": "üìä Calculates next batch starting position by adding current BatchIndex to BatchSize. Used to determine array slice position for the next batch iteration in the processing loop."
              },
              "type": "SetVariable",
              "inputs": {
                "name": "BatchIndexTemp",
                "value": "@add(variables('BatchIndex'), variables('BatchSize'))"
              }
            },
            "Set_BatchIndex": {
              "runAfter": {
                "Set_BatchIndexTemp": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "b346749e-7933-4e16-84d3-c3a8954aa14b",
                "description": "‚¨ÜÔ∏è Advances BatchIndex to next processing position by setting it to BatchIndexTemp value. This moves the loop forward to process the next batch of 500 records in the subsequent iteration."
              },
              "type": "SetVariable",
              "inputs": {
                "name": "BatchIndex",
                "value": "@variables('BatchIndexTemp')"
              }
            },
            "Convert_Batch_JSON_to_string": {
              "runAfter": {
                "Compose_Batch": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "32cb5c23-50ff-4c47-9240-803014e65235",
                "description": "üîó Converts batch array to string format required by SQL stored procedure. Transforms composed batch data into JSON string that wspApplyChanges can process for database operations."
              },
              "type": "Compose",
              "inputs": "@string(outputs('Compose_Batch'))"
            }
          },
          "runAfter": {
            "üîÑ_Batch_Processing_Section": [
              "Succeeded"
            ]
          },
          "expression": "@greaterOrEquals(variables('BatchIndex'),variables('BatchTotalCount'))",
          "limit": {
            "count": 60,
            "timeout": "PT1H"
          },
          "metadata": {
            "operationMetadataId": "20386213-9a5c-44ef-8f86-87beca21aa7a",
            "description": "üîÑ Main batch processing loop that continues until all records are processed. Each iteration processes up to 500 records, applies them to the target system via wspApplyChanges, and increments the batch index. Includes error handling and prevents infinite loops with a 60-iteration limit and 1-hour timeout."
          },
          "type": "Until"
        },
        "ESP_-_Create_New_Backup_Snapshot_of_Source_View": {
          "runAfter": {
            "Log_Row_to_Dataverse_Table": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "backup-source-table",
            "description": "üõ°Ô∏è Creates a backup copy of the source table using wspBackupTable stored procedure. The backup table name follows the pattern [OriginalTable]_[TargetDB]_TEST for easy identification and rollback capabilities if needed."
          },
          "type": "OpenApiConnection",
          "inputs": {
            "parameters": {
              "server": "WSWMDWH01",
              "database": "WSSA",
              "procedure": "[df].[wspBackupTable]",
              "parameters/OriginalTableName": "@concat(first(variables('FlowConfig')?['KeyMappings'])?['SourceDB'],'.',\r\nfirst(variables('FlowConfig')?['KeyMappings'])?['SourceTableName'])",
              "parameters/Suffix": "@concat('_',first(variables('FlowConfig')?['KeyMappings'])?['TargetDB'],'_TEST')"
            },
            "host": {
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_sql",
              "operationId": "ExecuteProcedure_V2",
              "connectionName": "shared_sql-2"
            }
          }
        }
      }
    },
    "templateName": null
  },
  "schemaVersion": "1.0.0.0"
}